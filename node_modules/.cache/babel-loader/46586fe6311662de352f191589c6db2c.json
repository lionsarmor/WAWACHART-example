{"remainingRequest":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/babel-loader/lib/index.js!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/eslint-loader/index.js??ref--13-0!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/api/MDRService.js","dependencies":[{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/api/MDRService.js","mtime":1602350289715},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nvar url_mdrinterval = 'api/mdr/interval';\nvar url_mdrlive = 'api/mdr/live';\nvar url_mdrsave = 'api/mdr/save';\n\nvar MDRService =\n/*#__PURE__*/\nfunction () {\n  function MDRService() {\n    _classCallCheck(this, MDRService);\n  }\n\n  _createClass(MDRService, null, [{\n    key: \"MDR\",\n    // Gauges\n    value: function MDR(symbol, exchanges, timeIntervals, percentsAway) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var body, res, data;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  body = {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\": symbol,\n                    \"exchanges\": exchanges,\n                    \"percentsAway\": percentsAway\n                  };\n                  _context.next = 4;\n                  return axios.post(url_mdrinterval, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\": symbol,\n                    \"exchanges\": exchanges,\n                    \"percentsAway\": percentsAway\n                  });\n\n                case 4:\n                  res = _context.sent;\n                  data = res.data;\n\n                  if (data.error) {\n                    reject(data.error);\n                  }\n\n                  resolve(data);\n                  _context.next = 13;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](0);\n                  reject(_context.t0);\n\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 10]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"MDRLive\",\n    value: function MDRLive(symbol, exchanges, timeIntervals, percentsAway) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var res, data;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return axios.post(url_mdrlive, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\": symbol,\n                    \"exchanges\": exchanges\n                  });\n\n                case 3:\n                  res = _context2.sent;\n                  data = res.data;\n\n                  if (data.error) {\n                    reject(data.error);\n                  }\n\n                  resolve(data);\n                  _context2.next = 12;\n                  break;\n\n                case 9:\n                  _context2.prev = 9;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  reject(_context2.t0);\n\n                case 12:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 9]]);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"MDRSave\",\n    value: function MDRSave(symbol, exchanges, timeIntervals, percentsAway) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var res, data;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return axios.post(url_mdrsave, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\": symbol,\n                    \"exchanges\": exchanges,\n                    \"percentsaway\": percentsAway\n                  });\n\n                case 3:\n                  res = _context3.sent;\n                  data = res.data;\n\n                  if (data.error) {\n                    reject(data.error);\n                  }\n\n                  resolve(data);\n                  _context3.next = 12;\n                  break;\n\n                case 9:\n                  _context3.prev = 9;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  reject(_context3.t0);\n\n                case 12:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 9]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n\n  return MDRService;\n}();\n\nexport default MDRService;",{"version":3,"sources":["/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/api/MDRService.js"],"names":["axios","url_mdrinterval","url_mdrlive","url_mdrsave","MDRService","symbol","exchanges","timeIntervals","percentsAway","Promise","resolve","reject","body","post","res","data","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst url_mdrinterval = 'api/mdr/interval'\nconst url_mdrlive = 'api/mdr/live'\nconst url_mdrsave = 'api/mdr/save'\n\nclass MDRService {\n\n    // Gauges\n    static MDR( symbol, exchanges, timeIntervals, percentsAway) {\n        \n        return new Promise(async(resolve, reject)=>{\n            try {\n                let body = {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\":symbol,\n                    \"exchanges\":exchanges,\n                    \"percentsAway\": percentsAway\n                }\n                const res = await axios.post(url_mdrinterval, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\":symbol,\n                    \"exchanges\":exchanges,\n                    \"percentsAway\": percentsAway\n                })\n                const data = res.data\n                if (data.error) {\n                    reject(data.error)\n                }\n                resolve(data)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n    static MDRLive( symbol, exchanges, timeIntervals, percentsAway) {\n        return new Promise(async(resolve, reject)=>{\n            try {\n                const res = await axios.post(url_mdrlive, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\":symbol,\n                    \"exchanges\":exchanges,\n                })\n                const data = res.data\n                if (data.error) {\n                    reject(data.error)\n                }\n                resolve(data)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n\n    static MDRSave ( symbol, exchanges, timeIntervals, percentsAway) {\n        return new Promise(async(resolve, reject)=>{\n            try {\n                const res = await axios.post(url_mdrsave, {\n                    \"timeIntervals\": timeIntervals,\n                    \"symbol\":symbol,\n                    \"exchanges\":exchanges,\n                    \"percentsaway\": percentsAway\n                })\n                const data = res.data\n                if (data.error) {\n                    reject(data.error)\n                }\n                resolve(data)\n            } catch (err) {\n                reject(err)\n            }\n        })\n    }\n}\n\n\nexport default MDRService"]}]}