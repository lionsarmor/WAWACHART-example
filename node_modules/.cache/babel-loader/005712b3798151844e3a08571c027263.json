{"remainingRequest":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/babel-loader/lib/index.js!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vuetify-loader/lib/loader.js!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/components/LiquidationChart/LiquidationChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/components/LiquidationChart/LiquidationChart.vue","mtime":1602350289715},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Highcharts from \"highcharts\";\nimport stockInit from \"highcharts/modules/stock\";\nimport mapInit from \"highcharts/modules/map\";\nimport dragTools from \"highcharts/modules/drag-panes\";\nimport annotations from \"highcharts/modules/annotations-advanced\";\nimport priceIndicator from \"highcharts/modules/price-indicator\";\nimport fullScreen from \"highcharts/modules/full-screen\";\nimport indicators from \"highcharts/indicators/indicators\";\nimport allIndicators from \"highcharts/indicators/indicators-all\";\nimport stockTools from \"highcharts/modules/stock-tools\";\nimport { VUEX_GET_REQUEST_OHLC, VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS, VUEX_GET_USER_SETTINGS, VUEX_GET_LIQUIDATION_BUBBLES, VUEX_LEVERAGES_LONG, VUEX_LEVERAGES_SHORT, VUEX_UPDATE_MAGIC_LINES } from \"../../store/constants/bitmex\";\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n  data: function data() {\n    return {\n      chart: null,\n      updateArgs: [true, true, {\n        duration: 1000\n      }],\n      pointStartSet: false,\n      initialSet: false,\n      chartOptions: {\n        series: [{\n          type: \"candlestick\",\n          data: [],\n          xAxis: 0,\n          dataGrouping: {\n            enabled: false\n          },\n          tooltip: {\n            pointFormat: ''\n          }\n        }, {\n          type: \"bubble\",\n          plotBorderWidth: 1,\n          xAxis: 0,\n          data: [],\n          maxSize: '10%',\n          tooltip: {\n            useHTML: true,\n            headerFormat: '<table>',\n            pointFormat: '<tr><th>Price: </th><td>{point.y}</td></tr><br>' + '<tr><th>Volume: </th><td>{point.z}</td></tr>',\n            footerFormat: '</table>',\n            followPointer: true\n          }\n        }],\n        mapNavigation: {\n          enabled: true,\n          enableButtons: false\n        },\n        chart: {\n          height: window.innerHeight - 64,\n          width: window.innerWidth,\n          zoomType: \"xy\",\n          animation: false,\n          panning: true,\n          panKey: \"ctrl\",\n          zoomKey: \"alt\",\n          backgroundColor: {\n            linearGradient: {\n              x1: 0,\n              y1: 0,\n              x2: 1,\n              y2: 1\n            },\n            stops: [[0, \"#000000\"], [1, \"#333533\"]]\n          },\n          resetZoomButton: {\n            position: {\n              align: \"left\",\n              x: 10,\n              y: 10\n            }\n          }\n        },\n        scrollbar: {\n          enabled: false\n        },\n        rangeSelector: {\n          enabled: false\n        },\n        navigator: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        tooltip: {\n          enabled: true\n        },\n        plotOptions: {\n          candlestick: {\n            color: \"#cc0000\",\n            upColor: \"#00cc66\",\n            lineColor: \"#cc0000\",\n            upLineColor: \"#00cc66\",\n            // docs\n            states: {\n              inactive: {\n                opacity: 1\n              }\n            }\n          },\n          spline: {\n            states: {\n              inactive: {\n                opacity: 1\n              }\n            }\n          },\n          bubble: {\n            tooltip: {\n              enabled: true\n            },\n            color: \"#33ccff\"\n          }\n        },\n        xAxis: [{\n          crosshair: {\n            snap: true,\n            label: {\n              enabled: false\n            }\n          },\n          overscroll: 60000 * 20\n        }],\n        yAxis: [{\n          gridLineColor: \"grey\",\n          lineColor: \"grey\",\n          gridLineWidth: \".5px\",\n          minorGridLineColor: \"transparent\",\n          visible: true,\n          crosshair: {\n            snap: false,\n            label: {\n              enabled: true,\n              format: \"{value:.2f}\"\n            }\n          }\n        }]\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState({\n    ohlc: function ohlc(state) {\n      return state.bitmex.ohlc;\n    },\n    simpleAveragePoints: function simpleAveragePoints(state) {\n      return state.bitmex.simpleAveragePoints;\n    },\n    liquidationBubbles: function liquidationBubbles(state) {\n      return state.bitmex.liquidationBubbles;\n    },\n    forceKeyRender: function forceKeyRender(state) {\n      return state.bitmex.ForceRenderChart;\n    },\n    updateLineCharts: function updateLineCharts(state) {\n      return state.bitmex.updateLineCharts;\n    },\n    clearAllSeries: function clearAllSeries(state) {\n      return state.bitmex.clearAllSeries;\n    },\n    toggleCrosshair: function toggleCrosshair(state) {\n      return state.bitmex.crosshair;\n    },\n    updatedMagicLines: function updatedMagicLines(state) {\n      return state.bitmex.updateMagicLines;\n    },\n    magiclinecolorscheme: function magiclinecolorscheme(state) {\n      return state.bitmex.magiclinecolorscheme;\n    }\n  })),\n  watch: {\n    toggleCrosshair: function toggleCrosshair() {\n      this.crosshair();\n    },\n    clearAllSeries: function clearAllSeries() {\n      this.clearSeries();\n    },\n    forceKeyRender: function forceKeyRender() {\n      this.processNewLines();\n    },\n    updatedMagicLines: function updatedMagicLines() {\n      this.updateEachMagicLine();\n      this.getLiquidationBubbles();\n    },\n    liquidationBubbles: function liquidationBubbles() {\n      this.setBubbles();\n    }\n  },\n  methods: _objectSpread({}, mapActions({\n    setBitmexData: VUEX_GET_REQUEST_OHLC,\n    applyLiquidationOptions: VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS,\n    getUserSettingsAndLiquidations: VUEX_GET_USER_SETTINGS,\n    getLiquidationBubbles: VUEX_GET_LIQUIDATION_BUBBLES,\n    getNewMagicPoints: VUEX_UPDATE_MAGIC_LINES\n  }), {\n    crosshair: function crosshair() {\n      if ('crosshair' in this.$refs.chart.chart.xAxis[0]) {\n        delete this.$refs.chart.chart.xAxis[0]['crosshair'];\n        delete this.$refs.chart.chart.yAxis[0]['crosshair'];\n      } else {\n        this.$refs.chart.chart.xAxis[0]['crosshair'] = {\n          snap: true,\n          label: {\n            enabled: false\n          }\n        };\n        this.$refs.chart.chart.yAxis[0]['crosshair'] = {\n          snap: false,\n          label: {\n            enabled: true,\n            format: \"{value:.2f}\"\n          }\n        };\n      }\n    },\n    resize: function resize() {\n      var toolBarCompensate = screen.width == document.body.clientWidth ? 0 : 64;\n      this.$refs.chart.chart.update({\n        chart: {\n          height: window.innerHeight - toolBarCompensate,\n          width: window.innerWidth\n        }\n      });\n    },\n    clearSeries: function clearSeries() {\n      var seriesL = this.$refs.chart.chart.series.length;\n\n      for (var i = 2; i < seriesL; i++) {\n        this.$refs.chart.chart.series[this.$refs.chart.chart.series.length - 1].remove(true);\n      }\n\n      this.$refs.chart.chart.series.length = 2;\n      return;\n    },\n    setBubbles: function () {\n      var _setBubbles = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$refs.chart.chart.series[1].setData(this.liquidationBubbles);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setBubbles() {\n        return _setBubbles.apply(this, arguments);\n      }\n\n      return setBubbles;\n    }(),\n    updateCandles: function () {\n      var _updateCandles = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var data, xExtremes, yExtremes;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = JSON.parse(JSON.stringify(this.ohlc));\n                xExtremes = this.$refs.chart.chart.xAxis[0].getExtremes();\n                yExtremes = this.$refs.chart.chart.yAxis[0].getExtremes();\n                this.$refs.chart.chart.series[0].setData(data);\n                this.$refs.chart.chart.xAxis[0].setExtremes(xExtremes.min, xExtremes.max, false, false);\n                this.$refs.chart.chart.yAxis[0].setExtremes(yExtremes.min, yExtremes.max, false, false);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateCandles() {\n        return _updateCandles.apply(this, arguments);\n      }\n\n      return updateCandles;\n    }(),\n    updateEachMagicLine: function updateEachMagicLine() {\n      var that = this;\n      that.$refs.chart.chart.series.forEach(function (series) {\n        that.simpleAveragePoints.forEach(function (lines) {\n          if (lines.seriesname == series.name) {\n            var magicLine = [];\n            lines.averages.forEach(function (avg) {\n              magicLine.push({\n                y: avg.average,\n                x: avg.updated,\n                dataLabels: {\n                  enabled: false,\n                  x: 100,\n                  y: -5,\n                  color: lines.color,\n                  textOutline: \"0px\",\n                  style: {\n                    textOutline: \"0px\",\n                    fontSize: '16px',\n                    fontWeight: \"normal\"\n                  }\n                }\n              });\n            });\n            magicLine[magicLine.length - 1].dataLabels.enabled = true;\n\n            magicLine[magicLine.length - 1].dataLabels.formatter = function () {\n              return this.y.toFixed(2) + \" \" + lines.seriesname;\n            };\n\n            series.setData(magicLine);\n          }\n        });\n      });\n    },\n    processNewLines: function processNewLines() {\n      var that = this; // REMOVE SERIES IF SIMPLEAVERAGESPOINTS IS EMPTY\n\n      if (this.simpleAveragePoints.length == 0) {\n        this.clearSeries();\n        return;\n      }\n\n      this.$refs.chart.chart.series.length = 2;\n      this.simpleAveragePoints.forEach(function (averageSeries) {\n        try {\n          that.$refs.chart.chart.addSeries({\n            type: \"spline\",\n            name: averageSeries.seriesname,\n            data: [],\n            xAxis: 0,\n            color: averageSeries.color,\n            lineWidth: 1,\n            turboThreshold: 0,\n            opacity: 1,\n            dataGrouping: {\n              enabled: false\n            },\n            tooltip: {\n              pointFormat: ''\n            }\n          });\n          var magicLine = [];\n          averageSeries.averages.forEach(function (avg) {\n            magicLine.push({\n              y: avg.average,\n              x: avg.updated,\n              dataLabels: {\n                enabled: false,\n                x: 100,\n                y: -5,\n                color: averageSeries.color,\n                textOutline: \"0px\",\n                style: {\n                  textOutline: \"0px\",\n                  fontSize: '16px',\n                  fontWeight: \"normal\"\n                }\n              }\n            });\n          });\n          magicLine[magicLine.length - 1].dataLabels.enabled = true;\n\n          magicLine[magicLine.length - 1].dataLabels.formatter = function () {\n            return this.y.toFixed(2) + \" \" + averageSeries.seriesname;\n          };\n\n          that.$refs.chart.chart.series[that.$refs.chart.chart.series.length - 1].setData(magicLine);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    }\n  }),\n  mounted: function mounted() {\n    window.onresize = this.resize;\n    this.setBitmexData();\n    this.getLiquidationBubbles();\n    var that = this;\n    setInterval(function () {\n      that.getNewMagicPoints();\n    }, 60000);\n    setInterval(function () {\n      that.updateCandles();\n    }, 1000);\n  }\n};",{"version":3,"sources":["LiquidationChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAUA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,0BAAA;AACA,OAAA,OAAA,MAAA,wBAAA;AACA,OAAA,SAAA,MAAA,+BAAA;AACA,OAAA,WAAA,MAAA,yCAAA;AACA,OAAA,cAAA,MAAA,oCAAA;AACA,OAAA,UAAA,MAAA,gCAAA;AACA,OAAA,UAAA,MAAA,kCAAA;AACA,OAAA,aAAA,MAAA,sCAAA;AACA,OAAA,UAAA,MAAA,gCAAA;AAEA,SACA,qBADA,EAEA,mCAFA,EAGA,sBAHA,EAIA,4BAJA,EAKA,mBALA,EAMA,oBANA,EAOA,uBAPA;AASA,SAAA,QAAA,EAAA,UAAA,QAAA,MAAA;AAIA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,IADA;AAEA,MAAA,UAAA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAAA,CAFA;AAGA,MAAA,aAAA,EAAA,KAHA;AAIA,MAAA,UAAA,EAAA,KAJA;AAKA,MAAA,YAAA,EAAA;AACA,QAAA,MAAA,EAAA,CACA;AACA,UAAA,IAAA,EAAA,aADA;AAEA,UAAA,IAAA,EAAA,EAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,YAAA,EAAA;AACA,YAAA,OAAA,EAAA;AADA,WAJA;AAOA,UAAA,OAAA,EAAA;AACA,YAAA,WAAA,EAAA;AADA;AAPA,SADA,EAYA;AACA,UAAA,IAAA,EAAA,QADA;AAEA,UAAA,eAAA,EAAA,CAFA;AAGA,UAAA,KAAA,EAAA,CAHA;AAIA,UAAA,IAAA,EAAA,EAJA;AAKA,UAAA,OAAA,EAAA,KALA;AAMA,UAAA,OAAA,EAAA;AACA,YAAA,OAAA,EAAA,IADA;AAEA,YAAA,YAAA,EAAA,SAFA;AAGA,YAAA,WAAA,EACA,oDACA,8CALA;AAMA,YAAA,YAAA,EAAA,UANA;AAOA,YAAA,aAAA,EAAA;AAPA;AANA,SAZA,CADA;AA8BA,QAAA,aAAA,EAAA;AACA,UAAA,OAAA,EAAA,IADA;AAEA,UAAA,aAAA,EAAA;AAFA,SA9BA;AAkCA,QAAA,KAAA,EAAA;AACA,UAAA,MAAA,EAAA,MAAA,CAAA,WAAA,GAAA,EADA;AAEA,UAAA,KAAA,EAAA,MAAA,CAAA,UAFA;AAGA,UAAA,QAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA,KAJA;AAKA,UAAA,OAAA,EAAA,IALA;AAMA,UAAA,MAAA,EAAA,MANA;AAOA,UAAA,OAAA,EAAA,KAPA;AAQA,UAAA,eAAA,EAAA;AACA,YAAA,cAAA,EAAA;AAAA,cAAA,EAAA,EAAA,CAAA;AAAA,cAAA,EAAA,EAAA,CAAA;AAAA,cAAA,EAAA,EAAA,CAAA;AAAA,cAAA,EAAA,EAAA;AAAA,aADA;AAEA,YAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA,CAAA;AAFA,WARA;AAYA,UAAA,eAAA,EAAA;AACA,YAAA,QAAA,EAAA;AACA,cAAA,KAAA,EAAA,MADA;AAEA,cAAA,CAAA,EAAA,EAFA;AAGA,cAAA,CAAA,EAAA;AAHA;AADA;AAZA,SAlCA;AAsDA,QAAA,SAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SAtDA;AAyDA,QAAA,aAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SAzDA;AA4DA,QAAA,SAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SA5DA;AA+DA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SA/DA;AAkEA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SAlEA;AAqEA,QAAA,WAAA,EAAA;AACA,UAAA,WAAA,EAAA;AACA,YAAA,KAAA,EAAA,SADA;AAEA,YAAA,OAAA,EAAA,SAFA;AAGA,YAAA,SAAA,EAAA,SAHA;AAIA,YAAA,WAAA,EAAA,SAJA;AAIA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,QAAA,EAAA;AACA,gBAAA,OAAA,EAAA;AADA;AADA;AALA,WADA;AAYA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,QAAA,EAAA;AACA,gBAAA,OAAA,EAAA;AADA;AADA;AADA,WAZA;AAmBA,UAAA,MAAA,EAAA;AACA,YAAA,OAAA,EAAA;AACA,cAAA,OAAA,EAAA;AADA,aADA;AAIA,YAAA,KAAA,EAAA;AAJA;AAnBA,SArEA;AA+FA,QAAA,KAAA,EAAA,CACA;AACA,UAAA,SAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,OAAA,EAAA;AADA;AAFA,WADA;AAOA,UAAA,UAAA,EAAA,QAAA;AAPA,SADA,CA/FA;AAyGA,QAAA,KAAA,EAAA,CACA;AACA,UAAA,aAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,MAFA;AAGA,UAAA,aAAA,EAAA,MAHA;AAIA,UAAA,kBAAA,EAAA,aAJA;AAKA,UAAA,OAAA,EAAA,IALA;AAMA,UAAA,SAAA,EAAA;AACA,YAAA,IAAA,EAAA,KADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,OAAA,EAAA,IADA;AAEA,cAAA,MAAA,EAAA;AAFA;AAFA;AANA,SADA;AAzGA;AALA,KAAA;AAgIA,GAlIA;AAoIA,EAAA,QAAA,oBACA,QAAA,CAAA;AACA,IAAA,IAAA,EAAA,cAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,IAAA;AAAA,KADA;AAEA,IAAA,mBAAA,EAAA,6BAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,mBAAA;AAAA,KAFA;AAGA,IAAA,kBAAA,EAAA,4BAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,kBAAA;AAAA,KAHA;AAIA,IAAA,cAAA,EAAA,wBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,gBAAA;AAAA,KAJA;AAKA,IAAA,gBAAA,EAAA,0BAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,gBAAA;AAAA,KALA;AAMA,IAAA,cAAA,EAAA,wBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,cAAA;AAAA,KANA;AAOA,IAAA,eAAA,EAAA,yBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,SAAA;AAAA,KAPA;AAQA,IAAA,iBAAA,EAAA,2BAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,gBAAA;AAAA,KARA;AASA,IAAA,oBAAA,EAAA,8BAAA,KAAA;AAAA,aAAA,KAAA,CAAA,MAAA,CAAA,oBAAA;AAAA;AATA,GAAA,CADA,CApIA;AAkJA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA,2BAAA;AACA,WAAA,SAAA;AACA,KAHA;AAIA,IAAA,cAAA,EAAA,0BAAA;AACA,WAAA,WAAA;AACA,KANA;AAOA,IAAA,cAAA,EAAA,0BAAA;AACA,WAAA,eAAA;AACA,KATA;AAUA,IAAA,iBAAA,EAAA,6BAAA;AACA,WAAA,mBAAA;AACA,WAAA,qBAAA;AACA,KAbA;AAcA,IAAA,kBAAA,EAAA,8BAAA;AACA,WAAA,UAAA;AACA;AAhBA,GAlJA;AAoKA,EAAA,OAAA,oBACA,UAAA,CAAA;AACA,IAAA,aAAA,EAAA,qBADA;AAEA,IAAA,uBAAA,EAAA,mCAFA;AAGA,IAAA,8BAAA,EAAA,sBAHA;AAIA,IAAA,qBAAA,EAAA,4BAJA;AAKA,IAAA,iBAAA,EAAA;AALA,GAAA,CADA;AAQA,IAAA,SARA,uBAQA;AACA,UAAA,eAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA;AACA,eAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,CAAA;AACA,eAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,CAAA;AACA,OAHA,MAGA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,IAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,KAAA,EAAA;AACA,YAAA,OAAA,EAAA;AADA;AAFA,SAAA;AAMA,aAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,IAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,KAAA,EAAA;AACA,YAAA,OAAA,EAAA,IADA;AAEA,YAAA,MAAA,EAAA;AAFA;AAFA,SAAA;AAOA;AACA,KA3BA;AA4BA,IAAA,MA5BA,oBA4BA;AACA,UAAA,iBAAA,GACA,MAAA,CAAA,KAAA,IAAA,QAAA,CAAA,IAAA,CAAA,WAAA,GAAA,CAAA,GAAA,EADA;AAGA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,MAAA,EAAA,MAAA,CAAA,WAAA,GAAA,iBADA;AAEA,UAAA,KAAA,EAAA,MAAA,CAAA;AAFA;AADA,OAAA;AAMA,KAtCA;AAuCA,IAAA,WAvCA,yBAuCA;AACA,UAAA,OAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA,MAAA,CAAA,IAAA;AACA;;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA;AACA;AACA,KA9CA;AAgDA,IAAA,UAAA;AAAA;AAAA;AAAA,8BAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,OAAA,CAAA,KAAA,kBAAA;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAhDA;AAmDA,IAAA,aAAA;AAAA;AAAA;AAAA,8BAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,IADA,GACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,IAAA,CAAA,CADA;AAEA,gBAAA,SAFA,GAEA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,EAFA;AAGA,gBAAA,SAHA,GAGA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,EAHA;AAIA,qBAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,OAAA,CAAA,IAAA;AACA,qBAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,EAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAA,KAAA;AACA,qBAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,EAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAA,KAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAnDA;AA2DA,IAAA,mBA3DA,iCA2DA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,MAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,IAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,cAAA,KAAA,CAAA,UAAA,IAAA,MAAA,CAAA,IAAA,EAAA;AACA,gBAAA,SAAA,GAAA,EAAA;AACA,YAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,SAAA,CAAA,IAAA,CAAA;AAAA,gBAAA,CAAA,EAAA,GAAA,CAAA,OAAA;AAAA,gBAAA,CAAA,EAAA,GAAA,CAAA,OAAA;AAAA,gBAAA,UAAA,EAAA;AAAA,kBAAA,OAAA,EAAA,KAAA;AAAA,kBAAA,CAAA,EAAA,GAAA;AAAA,kBAAA,CAAA,EAAA,CAAA,CAAA;AAAA,kBAAA,KAAA,EAAA,KAAA,CAAA,KAAA;AAAA,kBAAA,WAAA,EAAA,KAAA;AAAA,kBAAA,KAAA,EAAA;AAAA,oBAAA,WAAA,EAAA,KAAA;AAAA,oBAAA,QAAA,EAAA,MAAA;AAAA,oBAAA,UAAA,EAAA;AAAA;AAAA;AAAA,eAAA;AACA,aAFA;AAGA,YAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,UAAA,CAAA,OAAA,GAAA,IAAA;;AACA,YAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,UAAA,CAAA,SAAA,GAAA,YAAA;AAAA,qBAAA,KAAA,CAAA,CAAA,OAAA,CAAA,CAAA,IAAA,GAAA,GAAA,KAAA,CAAA,UAAA;AAAA,aAAA;;AACA,YAAA,MAAA,CAAA,OAAA,CAAA,SAAA;AACA;AACA,SAVA;AAWA,OAZA;AAaA,KA1EA;AA2EA,IAAA,eA3EA,6BA2EA;AACA,UAAA,IAAA,GAAA,IAAA,CADA,CAGA;;AACA,UAAA,KAAA,mBAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,WAAA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA;AAEA,WAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,aAAA,EAAA;AACA,YAAA;AACA,UAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA,YAAA,IAAA,EAAA,QADA;AAEA,YAAA,IAAA,EAAA,aAAA,CAAA,UAFA;AAGA,YAAA,IAAA,EAAA,EAHA;AAIA,YAAA,KAAA,EAAA,CAJA;AAKA,YAAA,KAAA,EAAA,aAAA,CAAA,KALA;AAMA,YAAA,SAAA,EAAA,CANA;AAOA,YAAA,cAAA,EAAA,CAPA;AAQA,YAAA,OAAA,EAAA,CARA;AASA,YAAA,YAAA,EAAA;AACA,cAAA,OAAA,EAAA;AADA,aATA;AAYA,YAAA,OAAA,EAAA;AACA,cAAA,WAAA,EAAA;AADA;AAZA,WAAA;AAgBA,cAAA,SAAA,GAAA,EAAA;AACA,UAAA,aAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA;AAAA,cAAA,CAAA,EAAA,GAAA,CAAA,OAAA;AAAA,cAAA,CAAA,EAAA,GAAA,CAAA,OAAA;AAAA,cAAA,UAAA,EAAA;AAAA,gBAAA,OAAA,EAAA,KAAA;AAAA,gBAAA,CAAA,EAAA,GAAA;AAAA,gBAAA,CAAA,EAAA,CAAA,CAAA;AAAA,gBAAA,KAAA,EAAA,aAAA,CAAA,KAAA;AAAA,gBAAA,WAAA,EAAA,KAAA;AAAA,gBAAA,KAAA,EAAA;AAAA,kBAAA,WAAA,EAAA,KAAA;AAAA,kBAAA,QAAA,EAAA,MAAA;AAAA,kBAAA,UAAA,EAAA;AAAA;AAAA;AAAA,aAAA;AACA,WAFA;AAGA,UAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,UAAA,CAAA,OAAA,GAAA,IAAA;;AACA,UAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,UAAA,CAAA,SAAA,GAAA,YAAA;AAAA,mBAAA,KAAA,CAAA,CAAA,OAAA,CAAA,CAAA,IAAA,GAAA,GAAA,aAAA,CAAA,UAAA;AAAA,WAAA;;AACA,UAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA,OAAA,CAAA,SAAA;AACA,SAxBA,CAwBA,OAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA;AAEA,OA7BA;AA8BA;AAnHA,IApKA;AAyRA,EAAA,OAzRA,qBAyRA;AACA,IAAA,MAAA,CAAA,QAAA,GAAA,KAAA,MAAA;AACA,SAAA,aAAA;AACA,SAAA,qBAAA;AACA,QAAA,IAAA,GAAA,IAAA;AACA,IAAA,WAAA,CAAA,YAAA;AACA,MAAA,IAAA,CAAA,iBAAA;AACA,KAFA,EAEA,KAFA,CAAA;AAGA,IAAA,WAAA,CAAA,YAAA;AACA,MAAA,IAAA,CAAA,aAAA;AACA,KAFA,EAEA,IAFA,CAAA;AAGA;AApSA,CAAA","sourcesContent":["<template>\n  <highcharts\n    ref=\"chart\"\n    :constructor-type=\"'stockChart'\"\n    :options=\"chartOptions\"\n    :updateArgs=\"updateArgs\"\n  ></highcharts>\n</template>\n\n<script>\nimport Highcharts from \"highcharts\";\nimport stockInit from \"highcharts/modules/stock\";\nimport mapInit from \"highcharts/modules/map\";\nimport dragTools from \"highcharts/modules/drag-panes\";\nimport annotations from \"highcharts/modules/annotations-advanced\";\nimport priceIndicator from \"highcharts/modules/price-indicator\";\nimport fullScreen from \"highcharts/modules/full-screen\";\nimport indicators from \"highcharts/indicators/indicators\";\nimport allIndicators from \"highcharts/indicators/indicators-all\";\nimport stockTools from \"highcharts/modules/stock-tools\";\n\nimport {\n  VUEX_GET_REQUEST_OHLC,\n  VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS,\n  VUEX_GET_USER_SETTINGS,\n  VUEX_GET_LIQUIDATION_BUBBLES,\n  VUEX_LEVERAGES_LONG,\n  VUEX_LEVERAGES_SHORT,\n  VUEX_UPDATE_MAGIC_LINES\n} from \"../../store/constants/bitmex\";\nimport { mapState, mapActions } from \"vuex\";\n\n\n\nexport default {\n  data() {\n    return {\n      chart: null,\n      updateArgs: [true, true, { duration: 1000 }],\n      pointStartSet: false,\n      initialSet: false,\n      chartOptions: {\n        series: [\n          {\n            type: \"candlestick\",\n            data: [],\n            xAxis: 0,\n            dataGrouping: {\n              enabled: false\n            },\n            tooltip: {\n              pointFormat: ''\n            }\n          },\n          {\n            type: \"bubble\",\n            plotBorderWidth: 1,\n            xAxis: 0,\n            data: [],\n            maxSize:'10%',\n            tooltip: {\n                useHTML: true,\n                headerFormat: '<table>',\n                pointFormat:\n                            '<tr><th>Price: </th><td>{point.y}</td></tr><br>' +\n                            '<tr><th>Volume: </th><td>{point.z}</td></tr>',\n                footerFormat: '</table>',\n                followPointer: true\n            }\n          },\n        ],\n        mapNavigation: {\n            enabled: true,\n            enableButtons: false\n         },\n        chart: {\n          height: window.innerHeight - 64,\n          width: window.innerWidth,\n          zoomType: \"xy\",\n          animation: false,\n          panning: true,\n          panKey: \"ctrl\",\n          zoomKey: \"alt\",\n          backgroundColor: {\n            linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n            stops: [[0, \"#000000\"], [1, \"#333533\"]]\n          },\n          resetZoomButton: {\n            position: {\n              align: \"left\",\n              x: 10,\n              y: 10\n            }\n          }\n        },\n        scrollbar: {\n          enabled: false\n        },\n        rangeSelector: {\n          enabled: false\n        },\n        navigator: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        tooltip: {\n          enabled: true\n        },\n        plotOptions: {\n          candlestick: {\n            color: \"#cc0000\",\n            upColor: \"#00cc66\",\n            lineColor: \"#cc0000\",\n            upLineColor: \"#00cc66\", // docs\n            states: {\n                inactive: {\n                  opacity: 1\n              }\n            }\n          },\n          spline: {\n              states: {\n                inactive: {\n                  opacity: 1\n              }\n            }\n          },\n          bubble: {\n            tooltip: {\n              enabled: true\n            },\n            color: \"#33ccff\"\n          }\n        },\n        xAxis: [\n          {\n            crosshair: {\n              snap: true,\n              label: {\n                enabled: false\n              }\n            },\n            overscroll: 60000 * 20\n          }],\n        yAxis: [\n          {\n            gridLineColor: \"grey\",\n            lineColor: \"grey\",\n            gridLineWidth: \".5px\",\n            minorGridLineColor: \"transparent\",\n            visible: true,\n            crosshair: {\n              snap: false,\n              label: {\n                enabled: true,\n                format: \"{value:.2f}\"\n              }\n            }\n          }\n        ]\n      }\n    };\n  },\n\n  computed: {\n    ...mapState({\n      ohlc: state => state.bitmex.ohlc,\n      simpleAveragePoints: state => state.bitmex.simpleAveragePoints,\n      liquidationBubbles: state => state.bitmex.liquidationBubbles,\n      forceKeyRender: state => state.bitmex.ForceRenderChart,\n      updateLineCharts: state => state.bitmex.updateLineCharts,\n      clearAllSeries: state => state.bitmex.clearAllSeries,\n      toggleCrosshair: state=> state.bitmex.crosshair,\n      updatedMagicLines: state => state.bitmex.updateMagicLines,\n      magiclinecolorscheme: state => state.bitmex.magiclinecolorscheme\n    })\n  },\n\n  watch : {\n    toggleCrosshair: function() {\n      this.crosshair()\n    },\n    clearAllSeries: function() {\n      this.clearSeries()\n    },\n    forceKeyRender: function() {\n      this.processNewLines()\n    },\n    updatedMagicLines: function() {\n      this.updateEachMagicLine()\n      this.getLiquidationBubbles()\n    }, \n    liquidationBubbles: function() {\n      this.setBubbles()\n    }\n  },\n  methods: {\n    ...mapActions({\n      setBitmexData: VUEX_GET_REQUEST_OHLC,\n      applyLiquidationOptions: VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS,\n      getUserSettingsAndLiquidations: VUEX_GET_USER_SETTINGS,\n      getLiquidationBubbles: VUEX_GET_LIQUIDATION_BUBBLES,\n      getNewMagicPoints: VUEX_UPDATE_MAGIC_LINES\n    }),\n    crosshair(){\n      if ('crosshair' in this.$refs.chart.chart.xAxis[0]) {\n        delete this.$refs.chart.chart.xAxis[0]['crosshair']\n        delete this.$refs.chart.chart.yAxis[0]['crosshair']\n      } else {\n        this.$refs.chart.chart.xAxis[0]['crosshair'] ={\n              snap: true,\n              label: {\n                enabled: false\n              }\n           }\n        this.$refs.chart.chart.yAxis[0]['crosshair'] = {\n              snap: false,\n              label: {\n                enabled: true,\n                format: \"{value:.2f}\"\n              }\n            }\n      }\n    },\n    resize() {\n      let toolBarCompensate =\n        screen.width == document.body.clientWidth ? 0 : 64;\n\n      this.$refs.chart.chart.update({\n        chart: {\n          height: window.innerHeight - toolBarCompensate,\n          width: window.innerWidth\n        }\n      });\n    },\n    clearSeries() {\n        let seriesL = this.$refs.chart.chart.series.length\n        for (let i=2; i<seriesL; i++){\n          this.$refs.chart.chart.series[this.$refs.chart.chart.series.length-1].remove(true)\n        }\n        this.$refs.chart.chart.series.length = 2\n        return\n    },\n\n    setBubbles: async function() {\n      this.$refs.chart.chart.series[1].setData(this.liquidationBubbles)\n    },\n    updateCandles: async function() {\n      let data = JSON.parse(JSON.stringify(this.ohlc))\n      let xExtremes = this.$refs.chart.chart.xAxis[0].getExtremes()\n      let yExtremes = this.$refs.chart.chart.yAxis[0].getExtremes()\n      this.$refs.chart.chart.series[0].setData(data);\n      this.$refs.chart.chart.xAxis[0].setExtremes(xExtremes.min, xExtremes.max, false, false)\n      this.$refs.chart.chart.yAxis[0].setExtremes(yExtremes.min, yExtremes.max, false, false)\n    },\n    updateEachMagicLine() {\n      let that = this\n      that.$refs.chart.chart.series.forEach(series => {\n        that.simpleAveragePoints.forEach(lines => {\n          if (lines.seriesname == series.name) {\n            let magicLine = []\n            lines.averages.forEach(avg => {\n            magicLine.push({y: avg.average, x: avg.updated, dataLabels: { enabled: false, x: 100, y:-5, color: lines.color, textOutline: \"0px\",  style: {  textOutline: \"0px\", fontSize: '16px', fontWeight: \"normal\" }}})\n          })\n          magicLine[magicLine.length-1].dataLabels.enabled = true\n          magicLine[magicLine.length-1].dataLabels.formatter = function() {return this.y.toFixed(2) + \" \" + lines.seriesname}\n          series.setData(magicLine)\n          }\n        })\n      })\n    },\n    processNewLines() {\n      let that = this\n\n      // REMOVE SERIES IF SIMPLEAVERAGESPOINTS IS EMPTY\n      if (this.simpleAveragePoints.length == 0) {\n        this.clearSeries()\n        return\n      }\n      this.$refs.chart.chart.series.length = 2\n\n      this.simpleAveragePoints.forEach(averageSeries => {\n        try {\n          that.$refs.chart.chart.addSeries({\n            type: \"spline\",\n            name: averageSeries.seriesname,\n            data: [],\n            xAxis: 0,\n            color: averageSeries.color,\n            lineWidth: 1,\n            turboThreshold: 0,\n            opacity: 1,\n            dataGrouping: {\n              enabled: false\n            },\n            tooltip: {\n              pointFormat: ''\n            }\n          })\n          let magicLine = []\n          averageSeries.averages.forEach(avg => {\n            magicLine.push({y: avg.average, x: avg.updated, dataLabels: { enabled: false, x: 100, y:-5, color: averageSeries.color, textOutline: \"0px\",  style: {  textOutline: \"0px\", fontSize: '16px', fontWeight: \"normal\" }}})\n          })\n          magicLine[magicLine.length-1].dataLabels.enabled = true\n          magicLine[magicLine.length-1].dataLabels.formatter = function() {return this.y.toFixed(2) + \" \" + averageSeries.seriesname}\n          that.$refs.chart.chart.series[that.$refs.chart.chart.series.length-1].setData(magicLine)\n        } catch (err) {\n          console.log(err)\n        }\n\n      })\n    }\n  },\n  mounted() {\n    window.onresize = this.resize;\n    this.setBitmexData();\n    this.getLiquidationBubbles()\n    let that = this;\n    setInterval(function() {\n      that.getNewMagicPoints()\n    }, 60000)\n    setInterval(function() {\n      that.updateCandles()\n    }, 1000);\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"../../assets/gui.css\";\n\n@import \"../../assets/popup.css\";\n\n.datalabels-ml {\n  color: \"red\"\n}\n</style>\n"],"sourceRoot":"src/components/LiquidationChart"}]}