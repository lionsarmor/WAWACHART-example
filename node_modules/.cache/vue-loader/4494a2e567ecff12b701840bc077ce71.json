{"remainingRequest":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/components/LiquidationChart/LiquidationChart.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/src/components/LiquidationChart/LiquidationChart.vue","mtime":1602350289715},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/roddy/Desktop/WEB-APPS/realtimecharts-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../../assets/gui.css\";\n\n@import \"../../assets/popup.css\";\n\n.datalabels-ml {\n  color: \"red\"\n}\n",{"version":3,"sources":["LiquidationChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2UA;;AAEA;;AAEA;AACA;AACA","file":"LiquidationChart.vue","sourceRoot":"src/components/LiquidationChart","sourcesContent":["<template>\n  <highcharts\n    ref=\"chart\"\n    :constructor-type=\"'stockChart'\"\n    :options=\"chartOptions\"\n    :updateArgs=\"updateArgs\"\n  ></highcharts>\n</template>\n\n<script>\nimport Highcharts from \"highcharts\";\nimport stockInit from \"highcharts/modules/stock\";\nimport mapInit from \"highcharts/modules/map\";\nimport dragTools from \"highcharts/modules/drag-panes\";\nimport annotations from \"highcharts/modules/annotations-advanced\";\nimport priceIndicator from \"highcharts/modules/price-indicator\";\nimport fullScreen from \"highcharts/modules/full-screen\";\nimport indicators from \"highcharts/indicators/indicators\";\nimport allIndicators from \"highcharts/indicators/indicators-all\";\nimport stockTools from \"highcharts/modules/stock-tools\";\n\nimport {\n  VUEX_GET_REQUEST_OHLC,\n  VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS,\n  VUEX_GET_USER_SETTINGS,\n  VUEX_GET_LIQUIDATION_BUBBLES,\n  VUEX_LEVERAGES_LONG,\n  VUEX_LEVERAGES_SHORT,\n  VUEX_UPDATE_MAGIC_LINES\n} from \"../../store/constants/bitmex\";\nimport { mapState, mapActions } from \"vuex\";\n\n\n\nexport default {\n  data() {\n    return {\n      chart: null,\n      updateArgs: [true, true, { duration: 1000 }],\n      pointStartSet: false,\n      initialSet: false,\n      chartOptions: {\n        series: [\n          {\n            type: \"candlestick\",\n            data: [],\n            xAxis: 0,\n            dataGrouping: {\n              enabled: false\n            },\n            tooltip: {\n              pointFormat: ''\n            }\n          },\n          {\n            type: \"bubble\",\n            plotBorderWidth: 1,\n            xAxis: 0,\n            data: [],\n            maxSize:'10%',\n            tooltip: {\n                useHTML: true,\n                headerFormat: '<table>',\n                pointFormat:\n                            '<tr><th>Price: </th><td>{point.y}</td></tr><br>' +\n                            '<tr><th>Volume: </th><td>{point.z}</td></tr>',\n                footerFormat: '</table>',\n                followPointer: true\n            }\n          },\n        ],\n        mapNavigation: {\n            enabled: true,\n            enableButtons: false\n         },\n        chart: {\n          height: window.innerHeight - 64,\n          width: window.innerWidth,\n          zoomType: \"xy\",\n          animation: false,\n          panning: true,\n          panKey: \"ctrl\",\n          zoomKey: \"alt\",\n          backgroundColor: {\n            linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n            stops: [[0, \"#000000\"], [1, \"#333533\"]]\n          },\n          resetZoomButton: {\n            position: {\n              align: \"left\",\n              x: 10,\n              y: 10\n            }\n          }\n        },\n        scrollbar: {\n          enabled: false\n        },\n        rangeSelector: {\n          enabled: false\n        },\n        navigator: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        tooltip: {\n          enabled: true\n        },\n        plotOptions: {\n          candlestick: {\n            color: \"#cc0000\",\n            upColor: \"#00cc66\",\n            lineColor: \"#cc0000\",\n            upLineColor: \"#00cc66\", // docs\n            states: {\n                inactive: {\n                  opacity: 1\n              }\n            }\n          },\n          spline: {\n              states: {\n                inactive: {\n                  opacity: 1\n              }\n            }\n          },\n          bubble: {\n            tooltip: {\n              enabled: true\n            },\n            color: \"#33ccff\"\n          }\n        },\n        xAxis: [\n          {\n            crosshair: {\n              snap: true,\n              label: {\n                enabled: false\n              }\n            },\n            overscroll: 60000 * 20\n          }],\n        yAxis: [\n          {\n            gridLineColor: \"grey\",\n            lineColor: \"grey\",\n            gridLineWidth: \".5px\",\n            minorGridLineColor: \"transparent\",\n            visible: true,\n            crosshair: {\n              snap: false,\n              label: {\n                enabled: true,\n                format: \"{value:.2f}\"\n              }\n            }\n          }\n        ]\n      }\n    };\n  },\n\n  computed: {\n    ...mapState({\n      ohlc: state => state.bitmex.ohlc,\n      simpleAveragePoints: state => state.bitmex.simpleAveragePoints,\n      liquidationBubbles: state => state.bitmex.liquidationBubbles,\n      forceKeyRender: state => state.bitmex.ForceRenderChart,\n      updateLineCharts: state => state.bitmex.updateLineCharts,\n      clearAllSeries: state => state.bitmex.clearAllSeries,\n      toggleCrosshair: state=> state.bitmex.crosshair,\n      updatedMagicLines: state => state.bitmex.updateMagicLines,\n      magiclinecolorscheme: state => state.bitmex.magiclinecolorscheme\n    })\n  },\n\n  watch : {\n    toggleCrosshair: function() {\n      this.crosshair()\n    },\n    clearAllSeries: function() {\n      this.clearSeries()\n    },\n    forceKeyRender: function() {\n      this.processNewLines()\n    },\n    updatedMagicLines: function() {\n      this.updateEachMagicLine()\n      this.getLiquidationBubbles()\n    }, \n    liquidationBubbles: function() {\n      this.setBubbles()\n    }\n  },\n  methods: {\n    ...mapActions({\n      setBitmexData: VUEX_GET_REQUEST_OHLC,\n      applyLiquidationOptions: VUEX_SET_APPLY_LIQUIDATIONS_OPTIONS,\n      getUserSettingsAndLiquidations: VUEX_GET_USER_SETTINGS,\n      getLiquidationBubbles: VUEX_GET_LIQUIDATION_BUBBLES,\n      getNewMagicPoints: VUEX_UPDATE_MAGIC_LINES\n    }),\n    crosshair(){\n      if ('crosshair' in this.$refs.chart.chart.xAxis[0]) {\n        delete this.$refs.chart.chart.xAxis[0]['crosshair']\n        delete this.$refs.chart.chart.yAxis[0]['crosshair']\n      } else {\n        this.$refs.chart.chart.xAxis[0]['crosshair'] ={\n              snap: true,\n              label: {\n                enabled: false\n              }\n           }\n        this.$refs.chart.chart.yAxis[0]['crosshair'] = {\n              snap: false,\n              label: {\n                enabled: true,\n                format: \"{value:.2f}\"\n              }\n            }\n      }\n    },\n    resize() {\n      let toolBarCompensate =\n        screen.width == document.body.clientWidth ? 0 : 64;\n\n      this.$refs.chart.chart.update({\n        chart: {\n          height: window.innerHeight - toolBarCompensate,\n          width: window.innerWidth\n        }\n      });\n    },\n    clearSeries() {\n        let seriesL = this.$refs.chart.chart.series.length\n        for (let i=2; i<seriesL; i++){\n          this.$refs.chart.chart.series[this.$refs.chart.chart.series.length-1].remove(true)\n        }\n        this.$refs.chart.chart.series.length = 2\n        return\n    },\n\n    setBubbles: async function() {\n      this.$refs.chart.chart.series[1].setData(this.liquidationBubbles)\n    },\n    updateCandles: async function() {\n      let data = JSON.parse(JSON.stringify(this.ohlc))\n      let xExtremes = this.$refs.chart.chart.xAxis[0].getExtremes()\n      let yExtremes = this.$refs.chart.chart.yAxis[0].getExtremes()\n      this.$refs.chart.chart.series[0].setData(data);\n      this.$refs.chart.chart.xAxis[0].setExtremes(xExtremes.min, xExtremes.max, false, false)\n      this.$refs.chart.chart.yAxis[0].setExtremes(yExtremes.min, yExtremes.max, false, false)\n    },\n    updateEachMagicLine() {\n      let that = this\n      that.$refs.chart.chart.series.forEach(series => {\n        that.simpleAveragePoints.forEach(lines => {\n          if (lines.seriesname == series.name) {\n            let magicLine = []\n            lines.averages.forEach(avg => {\n            magicLine.push({y: avg.average, x: avg.updated, dataLabels: { enabled: false, x: 100, y:-5, color: lines.color, textOutline: \"0px\",  style: {  textOutline: \"0px\", fontSize: '16px', fontWeight: \"normal\" }}})\n          })\n          magicLine[magicLine.length-1].dataLabels.enabled = true\n          magicLine[magicLine.length-1].dataLabels.formatter = function() {return this.y.toFixed(2) + \" \" + lines.seriesname}\n          series.setData(magicLine)\n          }\n        })\n      })\n    },\n    processNewLines() {\n      let that = this\n\n      // REMOVE SERIES IF SIMPLEAVERAGESPOINTS IS EMPTY\n      if (this.simpleAveragePoints.length == 0) {\n        this.clearSeries()\n        return\n      }\n      this.$refs.chart.chart.series.length = 2\n\n      this.simpleAveragePoints.forEach(averageSeries => {\n        try {\n          that.$refs.chart.chart.addSeries({\n            type: \"spline\",\n            name: averageSeries.seriesname,\n            data: [],\n            xAxis: 0,\n            color: averageSeries.color,\n            lineWidth: 1,\n            turboThreshold: 0,\n            opacity: 1,\n            dataGrouping: {\n              enabled: false\n            },\n            tooltip: {\n              pointFormat: ''\n            }\n          })\n          let magicLine = []\n          averageSeries.averages.forEach(avg => {\n            magicLine.push({y: avg.average, x: avg.updated, dataLabels: { enabled: false, x: 100, y:-5, color: averageSeries.color, textOutline: \"0px\",  style: {  textOutline: \"0px\", fontSize: '16px', fontWeight: \"normal\" }}})\n          })\n          magicLine[magicLine.length-1].dataLabels.enabled = true\n          magicLine[magicLine.length-1].dataLabels.formatter = function() {return this.y.toFixed(2) + \" \" + averageSeries.seriesname}\n          that.$refs.chart.chart.series[that.$refs.chart.chart.series.length-1].setData(magicLine)\n        } catch (err) {\n          console.log(err)\n        }\n\n      })\n    }\n  },\n  mounted() {\n    window.onresize = this.resize;\n    this.setBitmexData();\n    this.getLiquidationBubbles()\n    let that = this;\n    setInterval(function() {\n      that.getNewMagicPoints()\n    }, 60000)\n    setInterval(function() {\n      that.updateCandles()\n    }, 1000);\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import \"../../assets/gui.css\";\n\n@import \"../../assets/popup.css\";\n\n.datalabels-ml {\n  color: \"red\"\n}\n</style>\n"]}]}